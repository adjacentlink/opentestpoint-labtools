#
# Copyright (c) 2016-2017 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

"""TableRowCells transform callable."""

from subject import Subject
import numpy as np

from otestpoint.interface.measurementtable_pb2 import MeasurementTable

def table_row_cells_sum(cells):
    """Sum cells in a table row to produce single value.

    Args:

      cells (list(list(float))): List of list row cell values to sum.

    Returns:

      Sum value as a one element list (list(float)).

    """
    value = []

    for row in cells:
        value.append(sum(row))

    return [value]

def table_row_cells_pass(value):
    """Pass table row cells without modification.

    Args:

      columns (list(list(value))): List of list row cell values.

    Returns:

      List of list row cell values (list(list(value))).

    """
    return value

def to_value(any,fillna=None):
    if any.type == MeasurementTable.Measurement.TYPE_SINTEGER:
        return any.iValue
    elif any.type == MeasurementTable.Measurement.TYPE_UINTEGER:
        return any.uValue
    elif any.type == MeasurementTable.Measurement.TYPE_DOUBLE:
        return any.dValue
    else:
        if any.sValue == 'NA':
            return fillna if fillna != None else np.nan
        else:
            return any.sValue

class TableRowCells:
    """TableRowCells transform callable."""

    def __init__(self,*cells,**kwargs):
        """Creates a TableRowCells instance.

        Args:

          cells (int): One or more cells in a row to transform.

        Kwargs:

          func (callable): Callable to transform cells.

          applyif (tuple(func,cell)): Apply transform if func returns
            True. The value of the specific cell is passed as the only
            argument.

        Raises:

          KeyError

        """
        self._cells = cells
        self._func = kwargs.pop('func',table_row_cells_sum)
        self._applyif = kwargs.pop('applyif',(None,None))
        self._fillna = kwargs.pop('fillna',None)

        try:
            name = self._func.__name__
        except:
            name = self._func.__class__.__name__

        self.__name__="TableRowCells[%s].%s" % (",".join([str(x)for x in self._cells]),
                                                name)

        if kwargs:
            raise KeyError("Unknown key(s): %s" % ", ".join(kwargs.keys()))

    def __call__(self,msg):
        if len(msg.rows):
            all_values = []

            for row in msg.rows:
                values = []

                applyif,cell = self._applyif

                if applyif == None or \
                   applyif(to_value(row.values[cell],self._fillna)):

                    for cell in self._cells:
                        values.append(to_value(row.values[cell],self._fillna))

                    all_values.append(values)

            return self._func(all_values)
        else:
            return np.nan

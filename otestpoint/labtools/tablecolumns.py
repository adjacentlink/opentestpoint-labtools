#
# Copyright (c) 2016-2017 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

"""TableColumns transform callable."""

from subject import Subject
import traceback
import numpy as np
from otestpoint.interface.measurementtable_pb2 import MeasurementTable

def table_columns_sum(columns):
    """Sum all table columns to produce a single value.

    Args:

      columns (list(list(float))): List of list column values to sum.

    Returns:

      Sum

    """
    value = 0

    for column in columns:
        value += sum(column)

    return value

def table_columns_pass(value):
    """Pass table columns without modification.

    Args:

      columns (list(list(value))): List of list column values.

    Returns:

      List of list of column values (list(list(value))).

    """
    return value

class TableColumns:
    """TableColumns transform callable."""

    def __init__(self,*columns,**kwargs):
        """Creates a TableColumns instance.

        Args:

          columns (int): One or more table columns to transform.

        Kwargs:

          func (callable): Callable to transform columns.

        Raises:

          KeyError

        """
        self._columns = columns

        self._func = kwargs.pop('func',table_columns_sum)

        self._fillna = kwargs.pop('fillna',None)

        self._fillempty = kwargs.pop('fillempty',np.nan)

        try:
            name = self._func.__name__
        except:
            name = self._func.__class__.__name__

        self.__name__="TableColumns[%s].%s" % (",".join([str(x)for x in self._columns]),
                                               name)

        if kwargs:
            raise KeyError("Unknown key(s): %s" % ", ".join(kwargs.keys()))

    def __call__(self,msg):
        if len(msg.rows):
            valid = 0

            all_values = []

            for column in self._columns:
                values = []
                for row in msg.rows:
                    if row.values[column].type == MeasurementTable.Measurement.TYPE_SINTEGER:
                        values.append(row.values[column].iValue)
                    elif row.values[column].type == MeasurementTable.Measurement.TYPE_UINTEGER:
                        values.append(row.values[column].uValue)
                    elif row.values[column].type == MeasurementTable.Measurement.TYPE_DOUBLE:
                        values.append(row.values[column].dValue)
                    else:
                        if row.values[column].sValue == 'NA':
                            values.append(self._fillna if self._fillna != None else np.nan)
                        else:
                            values.append(row.values[column].sValue)

                all_values.append(values)

            return self._func(all_values)
        else:
            return self._fillempty
